#!/usr/bin/env python3
"""
Telegram Credentials Setup Helper

This script helps you get the required Telegram credentials for the E2E testing framework.
"""

import os
import sys
from telethon import TelegramClient
from telethon.sessions import StringSession


def get_telegram_credentials():
    """Interactive script to get Telegram credentials."""
    print("üîê Telegram Credentials Setup")
    print("=" * 40)
    print()
    
    print("üìã You need the following credentials:")
    print("1. Bot Token (from @BotFather)")
    print("2. API ID (from https://my.telegram.org)")
    print("3. API Hash (from https://my.telegram.org)")
    print("4. Session String (generated by this script)")
    print()
    
    # Get Bot Token
    print("ü§ñ Step 1: Get Bot Token")
    print("- Go to @BotFather on Telegram")
    print("- Send /newbot or use existing bot")
    print("- Copy the bot token (format: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)")
    bot_token = input("Enter your bot token: ").strip()
    
    if not bot_token or ':' not in bot_token:
        print("‚ùå Invalid bot token format")
        return None
    
    # Get API ID and Hash
    print("\nüåê Step 2: Get API ID and Hash")
    print("- Go to https://my.telegram.org")
    print("- Log in with your phone number")
    print("- Go to 'API development tools'")
    print("- Create a new application or use existing")
    print("- Copy the API ID and API Hash")
    
    api_id = input("Enter your API ID: ").strip()
    api_hash = input("Enter your API Hash: ").strip()
    
    if not api_id.isdigit() or not api_hash:
        print("‚ùå Invalid API ID or Hash")
        return None
    
    # Generate Session String
    print("\nüîë Step 3: Generate Session String")
    print("This will open a Telegram client to authenticate...")
    
    try:
        # Create client
        client = TelegramClient(StringSession(), int(api_id), api_hash)
        
        # Start client
        print("Starting Telegram client...")
        client.start()
        
        # Get session string
        session_string = client.session.save()
        
        print("‚úÖ Session string generated successfully!")
        print(f"Session string: {session_string}")
        
        # Stop client
        client.disconnect()
        
        return {
            'bot_token': bot_token,
            'api_id': api_id,
            'api_hash': api_hash,
            'session_string': session_string
        }
        
    except Exception as e:
        print(f"‚ùå Error generating session string: {e}")
        return None


def create_env_file(credentials):
    """Create .env.test file with credentials."""
    print("\nüìù Step 4: Create .env.test file")
    
    env_content = f"""# Test Environment Variables
# This file contains environment variables for testing only

# Telegram Configuration
TELEGRAM_BOT_TOKEN={credentials['bot_token']}
TELEGRAM_BOT_USERNAME=KickAITesting_bot
TELEGRAM_MAIN_CHAT_ID=-4889304885
TELEGRAM_LEADERSHIP_CHAT_ID=-4814449926

# Firebase Configuration
FIREBASE_CREDENTIALS_FILE=./credentials/firebase_credentials_testing.json

# Google API
GOOGLE_API_KEY=AIzaSyDymYVYObT-j8Fu8_0xAXUflXzzkC1Ey5s

# Test-specific settings
TEST_MODE=true
LOG_LEVEL=DEBUG

# Session strings for testing
# This session string can be used for both admin and player testing
ADMIN_SESSION_STRING="{credentials['session_string']}"
PLAYER_SESSION_STRING="{credentials['session_string']}"

# Additional test configuration
TEST_TIMEOUT=30
TEST_MAX_RETRIES=3
TEST_PARALLEL=false
TEST_LOG_LEVEL=INFO
TEST_TEAM_ID=test-team-123
TEST_USER_ID=test_user_123
TEST_CHAT_ID=test_chat_456
"""
    
    # Write to .env.test file
    with open('.env.test', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ .env.test file created successfully!")
    print("üìÑ File: .env.test")
    print()
    print("‚ö†Ô∏è  IMPORTANT: This .env.test file is for testing only")
    print("‚ö†Ô∏è  IMPORTANT: Keep this file secure and never commit it to version control")
    print("‚ö†Ô∏è  IMPORTANT: The session string allows access to your Telegram account")


def main():
    """Main function."""
    print("üéØ KICKAI E2E Testing - Telegram Credentials Setup")
    print("=" * 60)
    print()
    
    # Check if .env.test already exists
    if os.path.exists('.env.test'):
        response = input("‚ö†Ô∏è  .env.test file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Get credentials
    credentials = get_telegram_credentials()
    
    if credentials:
        # Create .env file
        create_env_file(credentials)
        
        print("\nüéâ Setup completed successfully!")
        print("\nNext steps:")
        print("1. Update FIRESTORE_PROJECT_ID in .env.test file")
        print("2. Run: python test_telegram_commands.py")
        print("3. Check E2E_TESTING_GUIDE.md for more information")
    else:
        print("\n‚ùå Setup failed. Please try again.")


if __name__ == '__main__':
    main() 