#!/usr/bin/env python3
"""
Player Service

This module provides player management functionality.
"""

import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Any

from src.features.team_administration.domain.services.team_service import TeamService

from ..entities.player import Player
from ..repositories.player_repository_interface import PlayerRepositoryInterface

logger = logging.getLogger(__name__)


@dataclass
class PlayerCreateParams:
    name: str
    phone: str
    position: str
    team_id: str
    created_by: str


class PlayerService:
    """Service for managing players."""

    def __init__(self, player_repository: PlayerRepositoryInterface, team_service: TeamService):
        self.player_repository = player_repository
        self.team_service = team_service

    async def create_player(self, params: PlayerCreateParams) -> Player:
        """Create a new player."""
        player = Player(
            id="",  # Will be generated by repository
            name=params.name,
            phone=params.phone,
            position=params.position,
            team_id=params.team_id,
            status="pending"
        )
        return await self.player_repository.create_player(player)

    async def get_player_by_id(self, player_id: str) -> Player | None:
        """Get a player by ID."""
        # Note: This method requires team_id, but we don't have it here
        # We'll need to modify this or the interface
        return await self.player_repository.get_player_by_id(player_id, "")

    async def get_player_by_phone(self, *, phone: str, team_id: str) -> Player | None:
        """Get a player by phone number."""
        return await self.player_repository.get_player_by_phone(phone, team_id)

    async def get_player_by_telegram_id(self, telegram_id: str, team_id: str) -> Player | None:
        """Get a player by Telegram ID."""
        try:
            # Use the database client directly since repository might not have this method
            from core.dependency_container import get_container
            container = get_container()
            database = container.get_database()

            # Call the firebase client method directly
            player_data = await database.get_player_by_telegram_id(telegram_id, team_id)
            if player_data:
                # Convert to Player entity
                from datetime import datetime

                from ..entities.player import Player

                return Player(
                    id=player_data.get("id", ""),
                    name=player_data.get("name", ""),
                    phone=player_data.get("phone", ""),
                    position=player_data.get("position", ""),
                    team_id=player_data.get("team_id", ""),
                    status=player_data.get("status", "pending"),
                    created_at=datetime.fromisoformat(player_data["created_at"]) if player_data.get("created_at") else None,
                    updated_at=datetime.fromisoformat(player_data["updated_at"]) if player_data.get("updated_at") else None
                )
            return None
        except Exception as e:
            logger.error(f"Error getting player by telegram_id {telegram_id}: {e}")
            return None

    async def get_players_by_team(self, *, team_id: str, status: str | None = None) -> list[Player]:
        """Get players for a team, optionally filtered by status."""
        players = await self.player_repository.get_all_players(team_id)

        if status:
            players = [player for player in players if player.status == status]

        return players

    async def get_all_players(self, team_id: str) -> list[Player]:
        """Get all players for a team (alias for get_players_by_team)."""
        return await self.get_players_by_team(team_id=team_id)

    async def get_active_players(self, team_id: str) -> list[Player]:
        """Get active players for a team."""
        return await self.get_players_by_team(team_id=team_id, status="active")

    async def update_player_status(self, player_id: str, status: str) -> Player:
        """Update a player's status."""
        player = await self.player_repository.get_player_by_id(player_id, "")
        if not player:
            raise ValueError(f"Player with ID {player_id} not found")

        player.status = status
        player.updated_at = datetime.now()

        return await self.player_repository.update_player(player)

    async def get_player_with_team_info(self, player_id: str) -> dict[str, Any]:
        """Get player information including team details."""
        player = await self.get_player_by_id(player_id)
        if not player:
            return {}

        # Get team information using team service
        team = await self.team_service.get_team_by_id(player.team_id)
        team_name = team.name if team else "Unknown Team"

        return {
            'player': player,
            'team_name': team_name,
            'team_id': player.team_id
        }

    async def delete_player(self, player_id: str) -> bool:
        """Delete a player."""
        return await self.player_repository.delete_player(player_id, "")

    async def get_my_status(self, user_id: str, team_id: str) -> str:
        """
        Get current user's player status and information.
        This method handles players only - team members are handled by TeamMemberService.
        
        Args:
            user_id: The user's Telegram ID
            team_id: The team ID
            
        Returns:
            User's player status and information as a formatted string
        """
        try:
            player = await self.get_player_by_telegram_id(user_id, team_id)
            
            if player:
                return self._format_player_status(player)
            
            # User not found as player
            return f"""❌ Player Not Found

🔍 User ID: {user_id}
🏢 Team ID: {team_id}

💡 You may need to register as a player using /register command."""

        except Exception as e:
            logger.error(f"Error getting player status for {user_id}: {e}")
            return f"❌ Error retrieving your player status: {str(e)}"

    def _format_player_status(self, player: Player) -> str:
        """Format player status information."""
        status_emoji = {
            "pending": "⏳",
            "approved": "✅", 
            "active": "🟢",
            "inactive": "🔴",
            "rejected": "❌"
        }
        
        emoji = status_emoji.get(player.status, "❓")
        
        return f"""👤 Player Information

📋 Name: {player.name or 'Not set'}
📱 Phone: {player.phone or 'Not set'}
⚽ Position: {player.position or 'Not set'}
🏷️ Player ID: {player.player_id or 'Not assigned'}
{emoji} Status: {player.status.title()}
🏢 Team: {player.team_id}

📅 Created: {player.created_at.strftime('%Y-%m-%d') if player.created_at else 'Unknown'}
🔄 Updated: {player.updated_at.strftime('%Y-%m-%d') if player.updated_at else 'Unknown'}"""


