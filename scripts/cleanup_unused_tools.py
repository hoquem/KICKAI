#!/usr/bin/env python3
"""
Cleanup script for unused tools.

This script removes unused tool implementations from the codebase.
Generated by manual_tool_inventory.py
"""

import os
import re
from pathlib import Path

def remove_tool_from_file(file_path: str, tool_name: str) -> bool:
    """Remove a tool implementation from a file."""
    try:
        with open(file_path, 'r') as f:
            content = f.read()
        
        # Find the tool function
        pattern = rf'@tool\("{re.escape(tool_name)}"\)\s*
def\s+(\w+)\s*\([^)]*\):.*?(?=\n\n|$)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            # Remove the entire function
            function_name = match.group(1)
            function_pattern = rf'def\s+{re.escape(function_name)}\s*\([^)]*\):.*?(?=\n\n|$)'
            new_content = re.sub(function_pattern, '', content, flags=re.DOTALL)
            
            # Also remove the @tool decorator if it's on a separate line
            decorator_pattern = rf'@tool\("{re.escape(tool_name)}"\)\s*\n'
            new_content = re.sub(decorator_pattern, '', new_content)
            
            with open(file_path, 'w') as f:
                f.write(new_content)
            
            print(f"‚úÖ Removed tool '{tool_name}' from {file_path}")
            return True
        else:
            print(f"‚ö†Ô∏è  Could not find tool '{tool_name}' in {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error removing tool '{tool_name}' from {file_path}: {e}")
        return False

def main():
    """Main cleanup function."""
    print("üßπ Starting unused tool cleanup...")
    
    # List of unused tools to remove with their file paths
    unused_tools_with_files = [
        ("get_player_match", "kickai/features/player_registration/domain/tools/player_tools.py"),
        ("list_team_members_and_players", "kickai/features/player_registration/domain/tools/player_tools.py"),
        ("add_team_member_simplified", "kickai/features/team_administration/domain/tools/simplified_team_member_tools.py"),
        ("create_team", "kickai/features/team_administration/domain/tools/team_management_tools.py"),
        ("get_my_team_member_status", "kickai/features/team_administration/domain/tools/team_member_tools.py"),
        ("get_team_members", "kickai/features/team_administration/domain/tools/team_member_tools.py"),
        ("add_team_member_role", "kickai/features/team_administration/domain/tools/team_member_tools.py"),
        ("remove_team_member_role", "kickai/features/team_administration/domain/tools/team_member_tools.py"),
        ("promote_team_member_to_admin", "kickai/features/team_administration/domain/tools/team_member_tools.py"),
        ("send_telegram_message", "kickai/features/communication/domain/tools/telegram_tools.py"),
        ("get_version_info", "kickai/features/system_infrastructure/domain/tools/help_tools.py"),
        ("get_system_available_commands", "kickai/features/system_infrastructure/domain/tools/help_tools.py"),
        ("log_command", "kickai/features/system_infrastructure/domain/tools/logging_tools.py"),
        ("log_error", "kickai/features/system_infrastructure/domain/tools/logging_tools.py"),
        ("get_firebase_document", "kickai/features/system_infrastructure/domain/tools/firebase_tools.py"),
        ("FINAL_HELP_RESPONSE", "kickai/features/shared/domain/tools/help_tools.py"),
        ("get_new_member_welcome_message", "kickai/features/shared/domain/tools/help_tools.py"),
        ("register_player", "kickai/features/shared/domain/tools/simple_onboarding_tools.py"),
        ("register_team_member", "kickai/features/shared/domain/tools/simple_onboarding_tools.py"),
        ("registration_guidance", "kickai/features/shared/domain/tools/simple_onboarding_tools.py"),
        ("team_member_guidance", "kickai/features/shared/domain/tools/onboarding_tools.py"),
    ]
    
    # Remove each unused tool
    removed_count = 0
    for tool_name, file_path in unused_tools_with_files:
        if remove_tool_from_file(file_path, tool_name):
            removed_count += 1
    
    print(f"‚úÖ Cleanup complete. Removed {removed_count} unused tools.")

if __name__ == "__main__":
    main()
