# KICKAI Project Changelog

## [Latest] - 2025-08-31

### üêõ **Fixed Test Data Configuration**
- **Team ID Alignment**: Updated test data setup to use team ID "KTI" to match mock service expectations
- **Collection Naming**: Fixed collection names in test data setup to use `kickai_KTI_players` and `kickai_KTI_team_members`
- **Test Member Addition**: Added Coach Wilson (telegram_id: 1003) to leadership members for proper testing
- **Data Consistency**: Ensured test data matches mock service configuration for seamless testing
- **Field Name Compatibility**: Fixed `_doc_to_team_member` to handle both `phone` and `phone_number` field names for backward compatibility
- **Context-Aware Error Messages**: Updated status tool to show "Member Not Found" in leadership chat vs "User Not Found" in main chat
- **Enhanced Error Reporting**: Added detailed logging to status tools and repository layer for better debugging
- **Admin Status Detection**: Fixed `_doc_to_team_member` to properly detect admin status from `roles` array
- **Method Name Consistency**: Fixed incorrect method calls from `get_member_by_telegram_id` to `get_team_member_by_telegram_id`
- **Attribute Name Consistency**: Fixed status tool to use `phone_number` instead of `phone` attribute for TeamMember entities
- **Telegram UI Optimization**: Converted status tool responses from markdown to plain text for better Telegram compatibility
- **CrewAI Delegation Fix**: Added explicit delegation format instructions to prevent dictionary context parameter errors
- **Tool Import Fixes**: Fixed `update_member_field` and `update_member_multiple` tools to use correct service imports instead of non-existent domain tools
- **Code Quality Improvements**: Added TeamMemberFields constants, standardized response format, and moved imports to module level
- **CrewAI Delegation Enhancement**: Added explicit delegation format instructions and list request routing rule
- **CrewAI Native Implementation**: Refactored to use proper hierarchical process, eliminated manual delegation tools, and simplified agent configuration
- **CrewAI Hierarchical Fix**: Added required `manager_llm` parameter for hierarchical process to resolve initialization error
- **Critical CrewAI Architecture Fixes**: Removed all delegation tools, fixed parameter type conversions, and strengthened anti-hallucination rules
- **CrewAI Delegation Tools Removal**: Removed delegation tools from agent creation in `configurable_agent.py` to prevent "Delegate work to coworker" tool usage in hierarchical process (manager_llm handles coordination, no manual delegation needed)

### üöÄ CrewAI Native Parameter Passing Implementation
- **CrewAI Task Description Context**: Implemented context passing through task descriptions instead of invalid context injection. CrewAI's `Task` context parameter is for task dependencies, not arbitrary data injection.
- **Simplified Tool Parameters**: Updated all tools to accept direct string parameters, removing complex JSON parsing logic and parameter handling complexity.
- **Enhanced Agent Backstories**: Updated agent configurations to handle context information passed through task descriptions.
- **Fixed Parameter Passing Issues**: Resolved both "unhashable type: 'dict'" and "'<' not supported between instances of 'str' and 'int'" errors through proper CrewAI parameter handling.
- **Entity-Consistent Tool Naming**: Updated tool names to match system entities (players and members) instead of generic "users". Split `approve_user` into `approve_player` and `approve_member`, and renamed `get_pending_users` to `list_pending_approvals` for consistency with the tool naming convention.
- **Improved Response Preservation**: Enhanced agent prompts to ensure exact specialist response reproduction with strict anti-hallucination measures.

### üöÄ Native CrewAI Implementation (Previous)
- **Removed `result_as_answer=True` from All Tools**: Updated 50+ tools across the codebase to remove `result_as_answer=True` parameter, enabling proper native CrewAI delegation and agent coordination. This change allows the MESSAGE_PROCESSOR (manager agent) to properly coordinate responses from specialist agents instead of having tools respond directly to users.
- **Native CrewAI Parameter Passing**: All tools now use simple string parameters compatible with CrewAI's native delegation system, ensuring proper parameter validation and type conversion within tool functions.
- **Enhanced Agent Coordination**: Manager agent can now properly format, preserve, and coordinate responses from specialist agents, providing better user experience and error handling.
- **Fixed CrewAI Delegation Error**: Resolved "unhashable type: 'dict'" error by updating remaining tools that still used dictionary parameters to use native CrewAI string parameters. Updated `get_player_current_info`, `update_player_multiple`, and `get_player_update_help` tools to use proper string parameter format.
- **Anti-Hallucination Implementation**: Added comprehensive validation helpers and updated agent prompts to prevent data hallucination, ensuring all responses come from validated tool outputs only.

### üöÄ System Upgrades
- **CrewAI Version Upgrade**: Successfully upgraded from CrewAI 0.165.1 to 0.175.0. This upgrade includes improved Flow handling, enhanced RAG capabilities, better memory management, and various bug fixes. Updated both requirements.txt and requirements-local.txt to reflect the new version.

### üîß Bug Fixes
- **Super Init Constructor Typos Fix**: Fixed critical typo where `super()._init_()` was used instead of `super().__init__()` in 107 locations across 9 files. This typo prevented proper parent class initialization in exception classes and other inheritance scenarios. Created and executed comprehensive fix script to correct all instances.
- **Mock UI Connection Fix**: Fixed mock Telegram UI connection issue by updating all references from port 8000 to port 8001 to match the actual mock server configuration. Updated mock_tester.html, test files, constants, and documentation to use the correct port. Added cache-busting parameters and no-cache meta tags to prevent browser caching issues.
- **Mock Invite Link Processing Fix**: Fixed issue where mock Telegram service was not updating player records in Firestore with telegram_id during invite link processing. The mock service now properly updates the player's telegram_id field when processing player invites, ensuring that /myinfo and other player tools can find the player correctly.
- **Real Telegram Invite Link Processing**: Implemented proper new_chat_members handler in real Telegram bot service to handle invite link processing and update player records with telegram_id. Added support for new_chat_members data in TelegramMessage class and AgenticMessageRouter.
- **Team Member Invite Link Processing**: Extended real Telegram bot service to handle team member invite link processing and update team member records with telegram_id when they join the leadership chat via invite links.
- **Team-Specific Collection Naming Fix**: Fixed issue where some invite link operations were using global collection names instead of team-specific ones. Updated PlayerToolService to create team-specific InviteLinkService instances for proper collection naming.
- **Player Status Activation Fix**: Fixed issue where invite link processing was setting telegram_id but not updating player status to 'active'. Both real Telegram and mock services now properly activate players when they join via invite links.
- **Response Formatting Consistency Fix**: Fixed inconsistent response formatting between /myinfo and /update commands. Updated update_player_field tool to use create_tool_response instead of create_json_response for consistent, clean message formatting without escaped quotes and extra newlines.
- **Shared Tools Response Formatting Update**: Updated all shared module tools to use create_tool_response for consistent formatting. Updated help_tools, user_tools, system_tools, and permission_tools to use the cleaner response format that prevents escaping issues and provides better user experience.
- **Team Administration Tools Response Formatting Update**: Completed updating all team administration tools to use create_tool_response. Updated player_management_tools, team_management_tools, team_member_tools, approve_tools, and team_administration_tools for consistent formatting and better user experience.
- **Dependency Container Initialization Fix**: Fixed issue where player update tools were failing due to uninitialized dependency container. Added container initialization checks to `update_player_field` and `get_my_status` tools to ensure services are available before use.
- **Position Update Persistence**: Resolved issue where `/update position` command appeared successful but position changes were not persisted. The fix ensures the dependency container is fully initialized before tools attempt to access services.

### üß™ Testing
- **Tool Functionality Validation**: Verified that position updates are correctly saved to the database and `/myinfo` command reads updated positions correctly.

## [Previous] - 2025-08-28

### üîß Bug Fixes
- **Help Tools Fix**: Resolved `/list` command failure by fixing application layer tools to call domain functions directly instead of non-existent service methods.
- **Service Registration and Tool Validation**: Fixed asynchronous dependency container initialization, duplicate tool registrations, and command conflicts.
- **Comprehensive Validator Code Quality**: Improved import order, type safety, error handling, and overall maintainability.
- **Registry Validator Code Quality**: Enhanced type safety, error handling, detailed logging, and validation logic.
- **Startup Validator Code Quality**: Improved code structure, error handling, and documentation.

### üèóÔ∏è Architecture Improvements
- **Intent-Based Delegation**: Removed hardcoded routing rules from manager agent, implementing pure intent-based delegation using LLM intelligence.
- **Type Safety and Error Handling**: Enhanced `crew_lifecycle_manager.py` with custom exceptions, protocols, and comprehensive type annotations.
- **CrewAI Delegation Parameter Fix**: Fixed manager agent delegation to use simple string parameters instead of dictionaries.
- **Manager Agent Tools**: Ensured manager agent has no execution tools (tools=[]) for proper hierarchical delegation.

### üìö Documentation Updates
- **CLAUDE.md**: Updated to reflect 5-agent system with native CrewAI routing and manager agent architecture.
- **.cursor/rules**: Updated documentation to reflect new architecture and best practices.
- **CHANGELOG.TXT**: Comprehensive tracking of all changes and improvements.

### üîÑ Code Refactoring
- **CrewAI Agents Simplification**: Reduced `crew_agents.py` complexity by 67% by leveraging CrewAI's native delegation.
- **Team Memory Compatibility**: Fixed `team_memory` attribute access in lifecycle manager for simplified system compatibility.

### üöÄ System Improvements
- **LLM Configuration**: Fixed manager agent to use configured LLM instead of defaulting to OpenAI.
- **Native CrewAI Routing**: Migrated from explicit NLP processing to CrewAI's built-in hierarchical delegation.
- **Tool Distribution**: Redistributed tools from MESSAGE_PROCESSOR to HELP_ASSISTANT for proper hierarchical setup.

## [Earlier] - 2025-08-28

### üîß Bug Fixes
- **Markdown Formatting Removal**: Removed markdown formatting from all tool responses for Telegram UI compatibility.
- **Clean Architecture Violations**: Fixed tools to call domain functions via service registry instead of direct service instantiation.
- **Service Registry Pattern**: Corrected tools to use `get_container().get_service()` pattern for proper dependency injection.

### üß™ Quality Assurance
- **Comprehensive QA Testing**: Achieved 100% pass rate for all player and team management commands.
- **Automated Testing**: Implemented Playwright-based testing with mock Telegram UI.
- **Test Coverage**: Created comprehensive test scenarios for all major bot functionality.

### üìä Performance Improvements
- **Startup Validation**: Enhanced system startup validation with comprehensive health checks.
- **Error Handling**: Improved error handling and logging throughout the system.
- **Resource Management**: Optimized resource usage and memory management.

### üèóÔ∏è Architecture Enhancements
- **Clean Architecture**: Enforced proper separation of concerns and dependency inversion.
- **Service Layer**: Implemented proper service layer with domain-driven design.
- **Tool Registry**: Centralized tool management with auto-discovery capabilities.

### üìö Documentation
- **Codebase Index**: Updated comprehensive codebase documentation.
- **Architecture Documentation**: Enhanced system architecture documentation.
- **API Documentation**: Improved tool and service documentation.

### üîÑ Code Quality
- **Import Organization**: Standardized import organization across the codebase.
- **Type Safety**: Enhanced type hints and validation throughout the system.
- **Error Messages**: Improved error messages and user feedback.

### üöÄ New Features
- **Mock Telegram UI**: Implemented local testing interface for bot functionality.
- **Enhanced Logging**: Improved logging with structured output and better error tracking.
- **Health Monitoring**: Added comprehensive health monitoring and validation.

### üêõ Bug Fixes
- **Database Connectivity**: Fixed Firestore connection issues and query optimization.
- **Command Processing**: Resolved command parsing and routing issues.
- **User Context**: Fixed user context handling and validation.

### üìà Performance
- **Response Time**: Optimized response times for all bot commands.
- **Memory Usage**: Reduced memory footprint and improved garbage collection.
- **Database Queries**: Optimized database queries and caching strategies.

### üîß Technical Debt
- **Code Cleanup**: Removed deprecated code and improved code organization.
- **Dependency Management**: Updated and optimized dependency management.
- **Configuration**: Improved configuration management and environment handling.

### üß™ Testing
- **Unit Tests**: Enhanced unit test coverage and reliability.
- **Integration Tests**: Improved integration testing with real database connections.
- **End-to-End Tests**: Added comprehensive end-to-end testing scenarios.

### üìö Documentation
- **API Documentation**: Enhanced API documentation with examples and usage patterns.
- **Deployment Guide**: Updated deployment and configuration documentation.
- **Troubleshooting**: Added comprehensive troubleshooting guides.

### üîÑ Refactoring
- **Code Organization**: Improved code organization and module structure.
- **Naming Conventions**: Standardized naming conventions across the codebase.
- **Error Handling**: Enhanced error handling patterns and consistency.

### üöÄ Features
- **Enhanced Commands**: Added new commands and improved existing functionality.
- **User Experience**: Improved user experience with better feedback and error messages.
- **Admin Tools**: Enhanced administrative tools and management capabilities.

### üêõ Fixes
- **Critical Bugs**: Fixed critical bugs affecting system stability.
- **Data Integrity**: Improved data integrity and validation.
- **Security**: Enhanced security measures and validation.

### üìà Improvements
- **Performance**: General performance improvements and optimizations.
- **Reliability**: Enhanced system reliability and error recovery.
- **Scalability**: Improved system scalability and resource management.

### üîß Maintenance
- **Code Quality**: Ongoing code quality improvements and refactoring.
- **Documentation**: Continuous documentation updates and improvements.
- **Testing**: Regular testing improvements and coverage expansion.

## [2025-01-27] - Markdown Formatting and Mock UI Display Fixes

### Fixed
- **Markdown Display Issues**: Removed markdown formatting (**bold**, *italic*, etc.) from all user-facing message templates to ensure clean display in Mock Telegram UI
- **Newline Display Issues**: Fixed newlines being escaped as `\n` characters instead of displaying as proper line breaks in Mock UI
- **Message Templates**: Updated constants.py to remove markdown from PLAYER_ADDED_WITH_INVITE and MEMBER_ADDED_WITH_INVITE messages
- **Field Validation**: Removed markdown from field validation help messages
- **Match Tools**: Cleaned up markdown formatting in match listing and details messages
- **Mock UI Compatibility**: Ensured all bot responses display properly with consistent newline handling
- **JSON Response Parsing**: Fixed Mock UI and Telegram bot services to properly parse JSON responses from tools
- **Invite Link Processing**: Fixed Mock API server endpoints to include `/api` prefix and updated request model to match UI expectations

### Simplified
- **Removed ResponseFormatter**: Eliminated unnecessary ResponseFormatter class that was adding complexity without value
- **Direct Message Handling**: Tools now return clean, formatted text directly without additional processing
- **Cleaner Architecture**: Simplified message flow by removing intermediate formatting layer
- **Maintained JSON Responses**: Kept JSON response format for reliable CrewAI agent processing while fixing parsing

### Technical Improvements
- Simplified approach: removed markdown from source templates rather than adding complex stripping logic
- Enhanced message formatting for better Mock UI compatibility
- Improved text readability by removing unnecessary markdown syntax
- Fixed JSON response parsing in both Mock UI and real Telegram bot services
- Maintained CrewAI best practices for tool responses
- Fixed Mock API server endpoint routing to match UI expectations

### Files Modified
- kickai/utils/constants.py - Removed markdown from message templates
- kickai/utils/field_validation.py - Cleaned up help message formatting
- kickai/features/match_management/domain/tools/match_tools.py - Removed markdown from match messages
- kickai/features/communication/infrastructure/telegram_bot_service.py - Fixed JSON response parsing
- kickai/features/communication/infrastructure/mock_telegram_bot_service.py - Fixed JSON response parsing
- tests/mock_telegram/backend/bot_integration.py - Removed ResponseFormatter usage
- kickai/features/communication/domain/services/response_formatter.py - Deleted (unnecessary complexity)
- mock_api_server.py - Fixed API endpoints to include `/api` prefix and updated invite request model

## [2025-01-27] - Enhanced Invite Processing Logging

### Added
- **Detailed Invite Processing Logs**: Added comprehensive logging throughout the invite link processing flow
- **High-Level Flow Visibility**: Added step-by-step logging to track invite processing from API request to completion
- **Debug-Friendly Logging**: Enhanced logging with clear prefixes ([API], [INVITE PROCESSING]) for easy filtering

### Technical Improvements
- Added logging for each major step in the invite processing flow:
  - API request reception and validation
  - Firebase client initialization
  - Collection name generation and document lookup
  - User data extraction and validation
  - Mock user creation and chat setup
  - Invitation context creation
  - Join event simulation
  - Response preparation and return
- All logs use consistent formatting with emojis and clear prefixes
- Error logging enhanced with detailed context information

### Files Modified
- tests/mock_telegram/backend/mock_telegram_service.py - Added comprehensive logging throughout invite processing flow

## [2025-01-27] - Missing Tools and Invite Link Fixes

### Fixed
- **Markdown Display Issues**: Removed markdown formatting (**bold**, *italic*, etc.) from all user-facing message templates to ensure clean display in Mock Telegram UI
- **Newline Display Issues**: Fixed newlines being escaped as `\n` characters instead of displaying as proper line breaks in Mock UI
- **Message Templates**: Updated constants.py to remove markdown from PLAYER_ADDED_WITH_INVITE and MEMBER_ADDED_WITH_INVITE messages
- **Field Validation**: Removed markdown from field validation help messages
- **Match Tools**: Cleaned up markdown formatting in match listing and details messages
- **Mock UI Compatibility**: Ensured all bot responses display properly with consistent newline handling
- **JSON Response Parsing**: Fixed Mock UI and Telegram bot services to properly parse JSON responses from tools
- **Invite Link Processing**: Fixed Mock API server endpoints to include `/api` prefix and updated request model to match UI expectations

### Simplified
- **Removed ResponseFormatter**: Eliminated unnecessary ResponseFormatter class that was adding complexity without value
- **Direct Message Handling**: Tools now return clean, formatted text directly without additional processing
- **Cleaner Architecture**: Simplified message flow by removing intermediate formatting layer
- **Maintained JSON Responses**: Kept JSON response format for reliable CrewAI agent processing while fixing parsing

### Technical Improvements
- Simplified approach: removed markdown from source templates rather than adding complex stripping logic
- Enhanced message formatting for better Mock UI compatibility
- Improved text readability by removing unnecessary markdown syntax
- Fixed JSON response parsing in both Mock UI and real Telegram bot services
- Maintained CrewAI best practices for tool responses
- Fixed Mock API server endpoint routing to match UI expectations

### Files Modified
- kickai/utils/constants.py - Removed markdown from message templates
- kickai/utils/field_validation.py - Cleaned up help message formatting
- kickai/features/match_management/domain/tools/match_tools.py - Removed markdown from match messages
- kickai/features/communication/infrastructure/telegram_bot_service.py - Fixed JSON response parsing
- kickai/features/communication/infrastructure/mock_telegram_bot_service.py - Fixed JSON response parsing
- tests/mock_telegram/backend/bot_integration.py - Removed ResponseFormatter usage
- kickai/features/communication/domain/services/response_formatter.py - Deleted (unnecessary complexity)
- mock_api_server.py - Fixed API endpoints to include `/api` prefix and updated invite request model

## [2025-01-27] - CrewAI Hierarchical Implementation
- **CrewAI Hierarchical Implementation**: Simplified task descriptions, proper context passing, and manager_llm coordination
- **CrewAI Bug Workaround**: Force crew recreation to avoid "Manager agent should not have tools" bug on subsequent executions
- **CrewAI Task Context Fix**: Fixed Task.context validation error by embedding context in description instead of using context parameter

---

*This changelog tracks all significant changes, improvements, and fixes to the KICKAI project. For detailed technical information, refer to the individual commit messages and code documentation.*
