#!/usr/bin/env python3
"""
Progressive Onboarding Tools for KICKAI system.

This module provides step-by-step progressive information collection tools
that guide users through the onboarding process without overwhelming them.
"""

import logging
from enum import Enum
from typing import Dict, List, Optional

from kickai.utils.crewai_tool_decorator import tool
from loguru import logger
from pydantic import BaseModel

from kickai.utils.constants import VALID_PLAYER_POSITIONS, VALID_TEAM_MEMBER_ROLES
from kickai.utils.validation_utils import normalize_phone, sanitize_input


class OnboardingStep(Enum):
    """Onboarding step enumeration."""
    
    WELCOME = "welcome"
    ENTITY_TYPE = "entity_type"
    NAME = "name" 
    PHONE = "phone"
    ROLE_POSITION = "role_position"
    OPTIONAL_INFO = "optional_info"
    CONFIRMATION = "confirmation"
    COMPLETE = "complete"


class OnboardingState(BaseModel):
    """Onboarding state tracking."""
    
    user_id: str
    team_id: str
    current_step: OnboardingStep
    entity_type: Optional[str] = None  # "player" or "team_member"
    collected_data: Dict[str, str] = {}
    validation_errors: list = []
    chat_type: Optional[str] = None


@tool("progressive_onboarding_step")
def progressive_onboarding_step(
    user_id: str,
    team_id: str, 
    current_step: str,
    user_input: str = None,
    entity_type: str = None,
    chat_type: str = None
) -> str:
    """
    Handle progressive onboarding step-by-step.
    
    Args:
        user_id: User ID
        team_id: Team ID
        current_step: Current onboarding step
        user_input: User's input for current step
        entity_type: "player" or "team_member" 
        chat_type: Chat context
        
    Returns:
        Next step guidance or completion message
    """
    try:
        step = OnboardingStep(current_step)
        
        if step == OnboardingStep.WELCOME:
            return _handle_welcome_step(user_id, chat_type, entity_type)
        elif step == OnboardingStep.ENTITY_TYPE:
            return _handle_entity_type_step(user_input, chat_type)
        elif step == OnboardingStep.NAME:
            return _handle_name_step(user_input, entity_type)
        elif step == OnboardingStep.PHONE:
            return _handle_phone_step(user_input, entity_type)
        elif step == OnboardingStep.ROLE_POSITION:
            return _handle_role_position_step(user_input, entity_type)
        elif step == OnboardingStep.OPTIONAL_INFO:
            return _handle_optional_info_step(user_input, entity_type)
        elif step == OnboardingStep.CONFIRMATION:
            return _handle_confirmation_step(user_input, entity_type)
        else:
            return "‚ùå Invalid onboarding step"
            
    except Exception as e:
        logger.error(f"‚ùå Progressive onboarding error: {e}")
        return f"‚ùå Onboarding error: {e!s}"


def _handle_welcome_step(user_id: str, chat_type: str, entity_type: str = None) -> str:
    """Handle welcome step."""
    
    if entity_type == "player":
        return f"""
üéâ **WELCOME TO KICKAI PLAYER ONBOARDING!**

Hi there! I'm excited to help you join our team as a player! ‚öΩ

üìù **WHAT WE'LL COLLECT:**
1. Your full name
2. Phone number  
3. Preferred playing position
4. Optional: Additional details

‚è±Ô∏è **TIME NEEDED:** About 2-3 minutes

üöÄ **LET'S START!**
What's your full name? (First and last name please)
        """
    elif entity_type == "team_member":
        return f"""
üéØ **WELCOME TO KICKAI TEAM MEMBER ONBOARDING!**

Great! I'm here to help you join as a team member with administrative access! 

üìù **WHAT WE'LL COLLECT:**
1. Your full name
2. Phone number
3. Administrative role  
4. Optional: Additional contact info

‚è±Ô∏è **TIME NEEDED:** About 2 minutes

üöÄ **LET'S START!**
What's your full name? (First and last name please)
        """
    else:
        # Need to determine entity type
        return f"""
üëã **WELCOME TO KICKAI ONBOARDING!**

I'm here to help you join our team! First, I need to know:

ü§î **ARE YOU REGISTERING AS:**
‚Ä¢ **Player** - To play in matches (requires approval)
‚Ä¢ **Team Member** - For administrative/coaching role (immediate access)

Please reply with either "Player" or "Team Member"
        """


def _handle_entity_type_step(user_input: str, chat_type: str) -> str:
    """Handle entity type determination."""
    
    if not user_input:
        return "‚ùå Please specify whether you're registering as a 'Player' or 'Team Member'"
        
    input_lower = user_input.lower().strip()
    
    if any(word in input_lower for word in ['player', 'play', 'match', 'football']):
        return f"""
‚öΩ **PLAYER REGISTRATION SELECTED!**

Perfect! You'll be registered as a player for matches.

üìã **PROCESS:**
‚Ä¢ Information collection
‚Ä¢ Leadership approval required
‚Ä¢ Access after approval

üöÄ **NEXT STEP:**
What's your full name? (First and last name please)

üì® **EXAMPLE:** "John Smith" or "Sarah Jones"
        """
    elif any(word in input_lower for word in ['team member', 'member', 'admin', 'coach', 'manager']):
        return f"""
üéØ **TEAM MEMBER REGISTRATION SELECTED!**

Excellent! You'll be registered with administrative access.

üìã **PROCESS:**
‚Ä¢ Information collection
‚Ä¢ Immediate activation
‚Ä¢ Administrative features available

üöÄ **NEXT STEP:**
What's your full name? (First and last name please)

üì® **EXAMPLE:** "John Smith" or "Sarah Jones"
        """
    else:
        return f"""
‚ùì **PLEASE CLARIFY:**

I didn't understand "{user_input}".

Please choose one:
‚Ä¢ Type **"Player"** - To play in matches
‚Ä¢ Type **"Team Member"** - For administrative role
        """


def _handle_name_step(user_input: str, entity_type: str) -> str:
    """Handle name collection step."""
    
    if not user_input:
        return "‚ùå Please provide your full name (first and last name)"
        
    name = sanitize_input(user_input).strip()
    name_parts = name.split()
    
    if len(name_parts) < 2:
        return f"""
‚ùå **NEED FULL NAME**

You provided: "{name}"

Please provide both first and last name:
üì® **EXAMPLE:** "John Smith" or "Sarah Jones"
        """
        
    # Valid name provided
    entity_display = "player" if entity_type == "player" else "team member"
    
    return f"""
‚úÖ **NAME CONFIRMED:** {name}

üì± **NEXT STEP - PHONE NUMBER:**
Please provide your phone number in UK format.

üì® **ACCEPTED FORMATS:**
‚Ä¢ +447123456789
‚Ä¢ 07123456789

üîí **PRIVACY:** Used only for team communication and verification.
    """


def _handle_phone_step(user_input: str, entity_type: str) -> str:
    """Handle phone collection step."""
    
    if not user_input:
        return "‚ùå Please provide your phone number"
        
    try:
        phone = normalize_phone(user_input)
        
        if not phone:
            return f"""
‚ùå **INVALID PHONE FORMAT**

You provided: "{user_input}"

üì± **PLEASE USE UK FORMAT:**
‚Ä¢ +447123456789
‚Ä¢ 07123456789

Try again with correct format.
            """
            
        if not (phone.startswith('+44') or phone.startswith('07')):
            return f"""
‚ùå **UK FORMAT REQUIRED**

You provided: "{user_input}"

üì± **ACCEPTED FORMATS:**
‚Ä¢ +447123456789 (international)
‚Ä¢ 07123456789 (national)

Please try again.
            """
            
        # Valid phone number
        if entity_type == "player":
            return f"""
‚úÖ **PHONE CONFIRMED:** {phone}

‚öΩ **NEXT STEP - PLAYING POSITION:**
What position do you prefer to play?

üéØ **CHOOSE FROM:**
‚Ä¢ **Goalkeeper** - Between the posts
‚Ä¢ **Defender** - Defensive play
‚Ä¢ **Midfielder** - Central play
‚Ä¢ **Forward** - Attacking play  
‚Ä¢ **Utility** - Can play multiple positions

Please type your preferred position.
            """
        else:  # team_member
            return f"""
‚úÖ **PHONE CONFIRMED:** {phone}

üéØ **NEXT STEP - ADMINISTRATIVE ROLE:**
What role will you take on?

üë• **CHOOSE FROM:**
‚Ä¢ **Coach** - Team coaching responsibilities
‚Ä¢ **Manager** - Overall team management
‚Ä¢ **Assistant** - Supporting coaching role
‚Ä¢ **Coordinator** - Events and logistics
‚Ä¢ **Volunteer** - General team support
‚Ä¢ **Admin** - Administrative privileges

Please type your preferred role.
            """
            
    except Exception as e:
        return f"‚ùå Phone validation error: {e!s}"


def _handle_role_position_step(user_input: str, entity_type: str) -> str:
    """Handle role/position collection step."""
    
    if not user_input:
        if entity_type == "player":
            return "‚ùå Please specify your preferred position"
        else:
            return "‚ùå Please specify your administrative role"
            
    input_clean = sanitize_input(user_input).strip().lower()
    
    if entity_type == "player":
        if input_clean not in VALID_PLAYER_POSITIONS:
            valid_positions = ", ".join([pos.title() for pos in VALID_PLAYER_POSITIONS])
            return f"""
‚ùå **INVALID POSITION**

You provided: "{user_input}"

‚öΩ **VALID POSITIONS:**
{valid_positions}

Please choose one of the above positions.
            """
        
        # Valid position
        return f"""
‚úÖ **POSITION CONFIRMED:** {input_clean.title()}

üéâ **INFORMATION COMPLETE!**

üìã **SUMMARY:**
‚Ä¢ **Type:** Player
‚Ä¢ **Position:** {input_clean.title()}
‚Ä¢ **Status:** Pending approval

‚ùì **OPTIONAL INFORMATION:**
Would you like to provide additional details?
‚Ä¢ Jersey number preference
‚Ä¢ Emergency contact
‚Ä¢ Medical notes

Type **"skip"** to proceed to registration, or provide additional info.
        """
        
    else:  # team_member
        if input_clean not in VALID_TEAM_MEMBER_ROLES:
            valid_roles = ", ".join([role.title() for role in VALID_TEAM_MEMBER_ROLES])
            return f"""
‚ùå **INVALID ROLE**

You provided: "{user_input}"

üë• **VALID ROLES:**
{valid_roles}

Please choose one of the above roles.
            """
            
        # Valid role
        return f"""
‚úÖ **ROLE CONFIRMED:** {input_clean.title()}

üéâ **INFORMATION COMPLETE!**

üìã **SUMMARY:**  
‚Ä¢ **Type:** Team Member
‚Ä¢ **Role:** {input_clean.title()}
‚Ä¢ **Status:** Ready for activation

‚ùì **OPTIONAL INFORMATION:**
Would you like to provide additional details?
‚Ä¢ Email address
‚Ä¢ Emergency contact

Type **"skip"** to proceed to registration, or provide additional info.
        """


def _handle_optional_info_step(user_input: str, entity_type: str) -> str:
    """Handle optional information step."""
    
    if not user_input or user_input.lower().strip() == "skip":
        return f"""
‚úÖ **READY FOR REGISTRATION!**

üìã **FINAL CONFIRMATION:**
All required information has been collected.

üöÄ **CONFIRM REGISTRATION:**
Type **"YES"** to complete your registration
Type **"NO"** to cancel or make changes

Proceed with registration?
        """
    
    # Process optional information
    entity_display = "player" if entity_type == "player" else "team member"
    
    return f"""
‚úÖ **ADDITIONAL INFO NOTED:** {user_input}

üìã **READY FOR REGISTRATION!**

üöÄ **CONFIRM REGISTRATION:**
Type **"YES"** to complete your {entity_display} registration
Type **"NO"** to cancel or make changes

Proceed with registration?
    """


def _handle_confirmation_step(user_input: str, entity_type: str) -> str:
    """Handle final confirmation step."""
    
    if not user_input:
        return "‚ùå Please confirm with 'YES' or 'NO'"
        
    input_clean = user_input.lower().strip()
    
    if input_clean in ['yes', 'y', 'confirm', 'proceed']:
        entity_display = "player" if entity_type == "player" else "team member"
        return f"""
üéâ **CONFIRMATION RECEIVED!**

‚úÖ Proceeding with {entity_display} registration...

‚è≥ **PROCESSING:** Please wait while I complete your registration.
        """
    elif input_clean in ['no', 'n', 'cancel', 'stop']:
        return f"""
‚ùå **REGISTRATION CANCELLED**

No problem! You can restart the onboarding process anytime.

üîÑ **TO RESTART:** Just say "I want to register" and I'll help you again.

Thanks for your interest! üëã
        """
    else:
        return f"""
‚ùì **PLEASE CONFIRM:**

You said: "{user_input}"

Please respond with:
‚Ä¢ **YES** - Complete registration
‚Ä¢ **NO** - Cancel registration
        """


@tool("get_onboarding_progress")
def get_onboarding_progress(user_id: str, team_id: str) -> str:
    """
    Get current onboarding progress for a user.
    
    Args:
        user_id: User ID
        team_id: Team ID
        
    Returns:
        Current progress status
    """
    try:
        # This would integrate with a state management system
        # For now, return generic progress message
        
        return f"""
üìä **ONBOARDING PROGRESS**

üë§ **User:** {user_id}
üèÜ **Team:** {team_id}

üìà **STATUS:** In Progress
üîÑ **NEXT:** Awaiting user input

üí° **TIP:** I'll guide you step by step through the process!
        """
        
    except Exception as e:
        logger.error(f"‚ùå Progress check error: {e}")
        return f"‚ùå Could not check progress: {e!s}"