# KICKAI Tasks Configuration
# This file defines all tasks that can be performed by agents in the KICKAI system

tasks:
  # Core System Tasks
  - name: process_message
    description: >
      Process incoming user messages, classify intent, and route to appropriate
      specialized agents or provide immediate responses for simple queries.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üë§ User, ü§ñ Bot)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Appropriately formatted response or routing decision based on message content and user context,
      following the Message Formatting Framework standards with proper emojis and Markdown structure.
    agent: message_processor

  - name: orchestrate_request
    description: >
      Decompose complex user requests into subtasks, coordinate agent interactions,
      and aggregate results into coherent responses.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üë§ User, ü§ñ Bot)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Coordinated response from multiple agents or clear task delegation,
      formatted according to the Message Formatting Framework with proper emojis and structure.
    agent: intelligent_system

  # Player Management Tasks
  - name: register_player
    description: >
      Guide new players through the registration process, collect required information,
      and create player profiles in the system.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üéâ Welcome, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete player registration with all required information and confirmation,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: onboarding_agent

  - name: check_player_status
    description: >
      Retrieve and display current player status, registration details, and
      any pending actions or approvals.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üë§ User, üìã Lists)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Comprehensive player status report with all relevant information,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: player_coordinator

  - name: approve_player
    description: >
      Review player registration requests and approve or reject based on
      system criteria and team requirements.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Approval decision with reasoning and next steps for the player,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: player_coordinator

  - name: get_all_players
    description: >
      Retrieve and display list of all registered players with their current
      status and relevant information.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìã Lists, üë• Members)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete list of players with status, registration date, and key details,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: player_coordinator

  # Team Management Tasks
  - name: create_team
    description: >
      Assist in team creation process, set up team structure, and configure
      team settings and permissions.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üëî Leadership)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      New team created with proper configuration and initial setup,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: team_administrator

  - name: manage_team_members
    description: >
      Add or remove team members, update member roles and permissions,
      and manage team composition.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üëî Leadership, üë• Members)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Updated team member list with current roles and permissions,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: team_administrator

  # Match Management Tasks
  - name: check_availability
    description: >
      Check player availability for upcoming matches and provide availability
      status for team planning.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìã Lists)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Availability report for requested players and time periods,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: availability_manager

  - name: create_match
    description: >
      Create a new match for the team with all necessary details including opponent,
      date, time, venue, and competition type.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üéâ Welcome, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete match creation with all required information and confirmation,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: team_manager

  - name: select_squad
    description: >
      Select the optimal squad for a specific match based on player availability,
      form, tactical requirements, and team balance.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üéâ Welcome, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete squad selection with tactical reasoning and player details,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: squad_selector

  - name: manage_availability
    description: >
      Manage player availability for matches, track responses, and coordinate
      with squad selection to ensure optimal team preparation.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üéâ Welcome, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete availability management with tracking and coordination details,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: availability_manager

  # Communication Tasks
  - name: send_announcement
    description: >
      Create and send system-wide announcements to relevant users and teams.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìû Contact)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Announcement sent successfully with confirmation of delivery,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: communication_manager

  - name: send_reminder
    description: >
      Send targeted reminders to specific users or teams about upcoming
      events, deadlines, or required actions.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìû Contact)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Reminders sent successfully with delivery confirmation,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: communication_manager

  - name: broadcast_message
    description: >
      Send messages to multiple users or teams simultaneously with
      appropriate targeting and delivery tracking.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìû Contact)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Message broadcasted successfully with delivery statistics,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: communication_manager

  # Help and Support Tasks
  - name: provide_help
    description: >
      Provide comprehensive help and support to users, explain system
      features, and guide users through processes.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, ü§ñ Bot, üëî Leadership, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Clear, helpful response that addresses user's question or concern,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: help_assistant

  - name: get_available_commands
    description: >
      Retrieve and display all available commands and their descriptions
      based on user context and permissions.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, ü§ñ Bot, üëî Leadership, üë§ User)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Complete list of available commands with descriptions and usage examples,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: help_assistant

  # Analytics and Reporting Tasks
  - name: generate_report
    description: >
      Generate comprehensive reports on system usage, team performance,
      or other relevant metrics.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìä Analytics)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Detailed report with relevant metrics, insights, and recommendations,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: analytics_agent

  - name: analyze_performance
    description: >
      Analyze team and individual performance data to provide insights
      and recommendations for improvement.
      
      **PROCESS OR RULES OF ENGAGEMENT:**
      Follow these steps for every request:
      1. **Acknowledge the user's request** and identify the core intent.
      2. **Based on the user's context** (ID, chat type), determine their permission level using the appropriate tools.
      3. **If the intent maps to a command they have permission for**, proceed. Otherwise, respond with the standardized 'Access Denied' message.
      4. **Select the best tool(s)** to fulfill the request.
      5. **Execute the tools** and synthesize the results.
      6. **Format the final response** according to the Message Formatting Framework.
      
      **OUTPUT FORMAT REQUIREMENTS:**
      Your final response MUST be formatted in Markdown and strictly follow the Message Formatting Framework:
      - Use specified emojis (‚úÖ Success, ‚ùå Error, ‚ÑπÔ∏è Info, üìä Analytics)
      - Use bold headers with `**Header**`
      - Format commands as `` `/command` ``
      - Structure lists with `‚Ä¢ Item`
      - Organize content in clear sections
    expected_output: >
      Performance analysis with actionable insights and recommendations,
      formatted with proper emojis and Markdown structure following the Message Formatting Framework.
    agent: analytics_agent 