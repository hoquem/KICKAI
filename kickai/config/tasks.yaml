# KICKAI Tasks Configuration - Updated for 5-Agent CrewAI Native Implementation
# This file defines task templates aligned with the current 5-agent system

# NOTE: With CrewAI native implementation, tasks are now created dynamically 
# with structured descriptions. These templates serve as reference patterns.

task_templates:
  # Core principles for all tasks (following CrewAI native approach)
  shared_instructions: |
    CRITICAL: Use CrewAI native parameter passing - pass context parameters directly to tools.
    
    Context parameters available:
    - team_id: Team identifier
    - telegram_id: User's Telegram ID  
    - username: User's username
    - chat_type: Chat context (main/leadership/private)
    
    WORKFLOW:
    1. Analyze user request and extract intent
    2. Validate user permissions and context
    3. Select appropriate tool(s) with direct parameters
    4. Execute tools using provided context parameters
    5. Format response using complete tool outputs
    
    OUTPUT REQUIREMENTS:
    - Use complete tool outputs without modification
    - Format with proper emojis: ✅ Success, ❌ Error, ℹ️ Info
    - Structure with clear headers and bullet points
    - Include next steps when relevant

# Task categories aligned with 5-agent system
tasks:

  # MESSAGE PROCESSOR AGENT TASKS
  - name: process_general_message
    description: >
      Process incoming user messages, handle basic queries, manage communications,
      and route complex requests to specialized agents when needed.
      
      Use structured description with embedded context for CrewAI native approach:
      - Extract user intent from message
      - Pass team_id, telegram_id, username, chat_type to tools
      - Select appropriate tools: get_user_status, get_available_commands, 
        send_message, send_announcement, send_poll
      - Use get_active_players (MAIN chat) or get_all_players (LEADERSHIP chat) for lists
    expected_output: >
      Immediate response for basic queries or successful routing to specialized agents,
      formatted with complete tool outputs and proper status indicators.
    agent: message_processor

  - name: manage_communications
    description: >
      Handle team communications including messages, announcements, and polls.
      
      Use structured description with embedded context:
      - Validate user permissions for communication type
      - Pass team_id, telegram_id, username, chat_type to communication tools
      - Select appropriate tools: send_message, send_announcement, send_poll
      - Provide delivery confirmation and status
    expected_output: >
      Communication sent successfully with delivery confirmation,
      formatted with complete tool outputs.
    agent: message_processor

  # HELP ASSISTANT AGENT TASKS
  - name: provide_comprehensive_help
    description: >
      Provide comprehensive help using FINAL_HELP_RESPONSE tool.
      
      Use structured description with embedded context:
      - For /help requests, ALWAYS use FINAL_HELP_RESPONSE tool first
      - Pass chat_type, telegram_id, team_id, username directly to tools
      - Use get_available_commands for context-specific command lists
      - Use get_command_help for detailed command explanations
      - Use get_welcome_message ONLY for new user onboarding (not help requests)
    expected_output: >
      Complete help information using full tool output without modification,
      tailored to user's chat context and permissions.
    agent: help_assistant

  - name: command_guidance
    description: >
      Provide specific command help and system guidance.
      
      Use structured description with embedded context:
      - Pass chat_type parameter to get_available_commands and get_command_help
      - Provide context-appropriate command information
      - Include usage examples and next steps
    expected_output: >
      Detailed command information and guidance using complete tool outputs.
    agent: help_assistant

  # PLAYER COORDINATOR AGENT TASKS  
  - name: manage_player_operations
    description: >
      Handle complete player lifecycle from registration through active participation.
      
      Use structured description with embedded context:
      - Pass team_id, telegram_id parameters directly to player tools
      - Use get_my_status for current user, get_player_status for specific players
      - Use get_all_players (all) or get_active_players (active only) for lists
      - Use register_player for new registrations, approve_player for approvals
      - Use list_team_members_and_players for combined views
    expected_output: >
      Accurate player information and successful registration/approval processes,
      formatted with complete tool outputs.
    agent: player_coordinator

  - name: player_registration_onboarding
    description: >
      Guide new players through registration and onboarding process.
      
      Use structured description with embedded context:
      - Use register_player tool with full player information
      - Provide clear guidance on registration requirements
      - Handle validation and error cases gracefully
    expected_output: >
      Successful player registration with next steps and guidance.
    agent: player_coordinator

  # TEAM ADMINISTRATOR AGENT TASKS
  - name: manage_team_administration
    description: >
      Handle team member management, roles, permissions, and governance.
      
      Use structured description with embedded context:
      - Pass team_id, telegram_id parameters to team administration tools
      - Use team_member_registration for new team members
      - Use get_team_members for member information
      - Use get_my_team_member_status for current user team member info
      - Use role management tools: add_team_member_role, remove_team_member_role
      - Use promote_team_member_to_admin for admin promotions
      - Use create_team for new team creation
    expected_output: >
      Successful team administration operations with clear status updates,
      formatted with complete tool outputs.
    agent: team_administrator

  - name: team_member_lifecycle
    description: >
      Manage complete team member lifecycle and role management.
      
      Use structured description with embedded context:
      - Handle team member registration, role changes, and promotions
      - Validate permissions for administrative operations
      - Provide clear confirmation of role changes
    expected_output: >
      Updated team member information with role changes confirmed.
    agent: team_administrator

  # SQUAD SELECTOR AGENT TASKS
  - name: manage_matches_and_squads
    description: >
      Handle complete match lifecycle, availability tracking, and squad selection.
      
      Use structured description with embedded context:
      - Pass team_id, match_id, player_id parameters to match/squad tools
      - Use list_matches, create_match, get_match_details for match operations
      - Use mark_availability, get_availability for availability management
      - Use select_squad, get_available_players_for_match for squad building
      - Use record_attendance, get_match_attendance for attendance tracking
      - Use history tools: get_player_availability_history, get_player_attendance_history
      - Use record_match_result for post-match data
    expected_output: >
      Complete match management with optimal squad selection and tracking,
      formatted with complete tool outputs.
    agent: squad_selector

  - name: availability_and_attendance
    description: >
      Track player availability and manage match attendance.
      
      Use structured description with embedded context:
      - Handle availability updates and attendance recording
      - Provide availability summaries for match planning
      - Track historical availability and attendance patterns
    expected_output: >
      Accurate availability and attendance tracking with historical data.
    agent: squad_selector

# Legacy task mapping for backwards compatibility
# Maps old agent names to new 5-agent system
legacy_agent_mapping:
  intelligent_system: message_processor
  availability_manager: squad_selector
  team_manager: squad_selector
  communication_manager: message_processor
  analytics_agent: message_processor  # Analytics handled by message processor for now

# Task execution guidelines for CrewAI native implementation
execution_guidelines:
  task_creation: |
    Tasks are now created dynamically using structured descriptions with embedded context.
    
    Example structured description format:
    ```
    User Request: {task_description}
    
    Context Information:
    - Team ID: {team_id}
    - User Telegram ID: {telegram_id} 
    - Username: {username}
    - Chat Type: {chat_type}
    
    Instructions: Use the provided context information to call tools with the appropriate parameters.
    Pass team_id, telegram_id, username, and chat_type as direct parameters to tools that require them.
    ```
  
  parameter_passing: |
    CRITICAL: Always pass context parameters directly to tools:
    - team_id: Required by most tools
    - telegram_id: User identification
    - username: Display name
    - chat_type: Permission context (main/leadership/private)
  
  response_handling: |
    - Use complete tool outputs without modification
    - Format responses with proper emojis and structure
    - Include error handling and validation feedback
    - Provide next steps when appropriate