# KICKAI Tasks Configuration - Native CrewAI Hierarchical Process
# Clean implementation for 5-Agent CrewAI system with hierarchical delegation

# NOTE: All tasks use clean tool naming convention with native CrewAI routing
# No legacy NLP collaboration patterns - using CrewAI's built-in intelligence

task_templates:
  # Core principles for CrewAI hierarchical process
  shared_instructions: |
    CRITICAL: Use ONLY new tool names following [action]_[entity]_[modifier] pattern.
    
    Context parameters available (STANDARDIZED ORDER):
    - telegram_id: User's Telegram ID (int)
    - team_id: Team identifier (str)
    - telegram_username: User's telegram username (str)
    - chat_type: Chat context (str: main/leadership/private)
    
    TOOL NAMING PATTERN:
    [action]_[entity]_[modifier] - e.g., get_player_self, get_player_by_identifier, create_member, list_players_active
    
    CREWAI NATIVE WORKFLOW:
    1. Manager agent (MESSAGE_PROCESSOR) analyzes user intent
    2. Manager delegates to appropriate specialist agent
    3. Specialist executes using assigned tools
    4. Manager coordinates response delivery
    
    OUTPUT REQUIREMENTS:
    - Use complete tool outputs without modification
    - Preserve all formatting, emojis, and structure
    - No summarization or condensation of tool responses
    - Include all details provided by tools

# Task categories for 5-agent CrewAI hierarchical system
tasks:

  # MESSAGE PROCESSOR AGENT TASKS - Manager Agent (No Tools)
  - name: coordinate_user_request
    description: >
      Coordinate user requests using CrewAI's native hierarchical delegation.
      
      MANAGER AGENT WORKFLOW:
      1. Analyze user intent using LLM intelligence
      2. Identify appropriate specialist agent based on domain expertise
      3. Delegate task to specialist agent with full context
      4. Coordinate response delivery to user
      
      DELEGATION STRATEGY:
      - Help requests → HELP_ASSISTANT
      - Player operations → PLAYER_COORDINATOR  
      - Team administration → TEAM_ADMINISTRATOR
      - Match/squad operations → SQUAD_SELECTOR
      
      Context parameters: telegram_id, team_id, telegram_username, chat_type
    expected_output: >
      Coordinated response from appropriate specialist agent with preserved formatting.
    agent: message_processor

  # HELP ASSISTANT AGENT TASKS
  - name: provide_comprehensive_help
    description: >
      Provide comprehensive help using help system tools.
      
      Use structured description with embedded context:
      - For /help requests, use show_help_commands tool first
      - Pass telegram_id, team_id, telegram_username, chat_type to tools (STANDARDIZED ORDER)
      - Use get_system_commands for context-specific command lists
      - Use show_help_usage for detailed command explanations
      - Use show_help_welcome ONLY for new user onboarding
    expected_output: >
      Complete help information using full tool output without modification,
      tailored to user's chat context and permissions.
    agent: help_assistant

  - name: system_status_queries
    description: >
      Handle system status queries and basic information requests.
      
      Use structured description with embedded context:
      - Use check_system_ping for connectivity tests
      - Use check_system_version for system information
      - Use get_player_status_self or get_member_status_self for user status queries
      - Pass context parameters in standardized order
    expected_output: >
      System status information with complete tool outputs.
    agent: help_assistant

  # PLAYER COORDINATOR AGENT TASKS
  - name: manage_player_operations
    description: >
      Handle complete player lifecycle and information management.
      
      Use structured description with embedded context:
      - Pass telegram_id, team_id, telegram_username, chat_type to player tools (STANDARDIZED ORDER)
      - Use get_player_self for current user, get_player_by_identifier for specific players
      - Use list_players_all (all) or list_players_active (active only) for lists
      - Use approve_player for player approvals
      - Use update_player_field/update_player_multiple for updates
      - Use list_members_and_players for combined views
    expected_output: >
      Accurate player information and successful operations,
      formatted with complete tool outputs.
    agent: player_coordinator

  - name: player_updates
    description: >
      Handle player information updates and modifications.
      
      Use structured description with embedded context:
      - Use update_player_field for single field changes
      - Use update_player_multiple for multiple field updates
      - Use get_player_update_help for update guidance
      - Validate permissions based on chat_type
    expected_output: >
      Successful player updates with confirmation and status.
    agent: player_coordinator

  # TEAM ADMINISTRATOR AGENT TASKS
  - name: manage_team_administration
    description: >
      Handle team member management, roles, and governance.
      
      Use structured description with embedded context:
      - Pass telegram_id, team_id, telegram_username, chat_type to team tools (STANDARDIZED ORDER)
      - Use create_member for new team members with invite links
      - Use create_player for player registration (administrative function)
      - Use get_member_info for member information
      - Use list_members_all for member lists
      - Use create_member_role/remove_member_role for role management
      - Use promote_member_admin for admin promotions
      - Use create_team for new team creation
    expected_output: >
      Successful team administration operations with clear status updates,
      formatted with complete tool outputs and invite links.
    agent: team_administrator

  - name: team_member_lifecycle
    description: >
      Manage complete team member lifecycle and role management.
      
      Use structured description with embedded context:
      - Handle team member creation, role changes, and promotions
      - Validate permissions for administrative operations
      - Provide clear confirmation of role changes
      - Generate invite links for new members
    expected_output: >
      Updated team member information with role changes confirmed.
    agent: team_administrator

  # SQUAD SELECTOR AGENT TASKS
  - name: manage_matches_and_squads
    description: >
      Handle complete match lifecycle, availability tracking, and squad selection.
      
      Use structured description with embedded context:
      - Pass telegram_id, team_id, telegram_username, chat_type plus match_id, player_id as needed (STANDARDIZED ORDER)
      - Use create_match, list_matches, get_match_details for match operations
      - Use mark_availability, get_availability for availability management
      - Use select_squad_match, list_squad_available for squad building
      - Use record_attendance, get_match_attendance for attendance tracking
      - Use get_player_attendance_history, get_player_availability_history for history
      - Use record_match_result for post-match data
    expected_output: >
      Complete match management with optimal squad selection and tracking,
      formatted with complete tool outputs.
    agent: squad_selector

  - name: availability_and_attendance
    description: >
      Track player availability and manage match attendance.
      
      Use structured description with embedded context:
      - Handle availability updates and attendance recording
      - Provide availability summaries for match planning
      - Track historical availability and attendance patterns
      - Support both player and administrative access patterns
    expected_output: >
      Accurate availability and attendance tracking with historical data.
    agent: squad_selector

# CrewAI Hierarchical Process Guidelines
execution_guidelines:
  
  hierarchical_process: |
    CrewAI Native Hierarchical Process (5-Agent System):
    
    1. MANAGER AGENT (MESSAGE_PROCESSOR):
       - No tools assigned (CrewAI requirement)
       - Uses LLM intelligence for intent analysis and delegation
       - Coordinates all specialist agent interactions
       - Preserves specialist responses exactly
    
    2. SPECIALIST AGENTS:
       - HELP_ASSISTANT: Help system, communications, system status
       - PLAYER_COORDINATOR: Player operations, information, updates
       - TEAM_ADMINISTRATOR: Team management, member administration
       - SQUAD_SELECTOR: Match management, availability, squad operations
    
    3. DELEGATION PATTERN:
       - Manager analyzes user request semantically
       - Routes to appropriate specialist based on domain expertise
       - Specialist executes with assigned tools
       - Manager delivers coordinated response

  task_creation: |
    Tasks are created dynamically using CrewAI's hierarchical process.
    
    Hierarchical Task Description Format:
    ```
    User Request: {task_description}
    
    Delegation Context:
    - User Telegram ID: {telegram_id} 
    - Team ID: {team_id}
    - Username: {telegram_username}
    - Chat Type: {chat_type}
    
    Manager Instructions:
    1. Analyze user intent using LLM intelligence
    2. Select appropriate specialist agent based on domain
    3. Delegate with full context preservation
    4. Coordinate response delivery
    
    Specialist Instructions:
    Use the provided context information to call tools with the appropriate parameters.
    Pass telegram_id, team_id, telegram_username, and chat_type as direct parameters to tools (STANDARDIZED ORDER).
    ```
  
  parameter_passing: |
    CRITICAL: Always pass context parameters directly to tools in STANDARDIZED ORDER:
    - telegram_id: User identification (int)
    - team_id: Required by most tools (str)
    - telegram_username: Display name (str)
    - chat_type: Permission context (str: main/leadership/private)
  
  response_handling: |
    - Use complete tool outputs without modification
    - Format responses with proper emojis and structure
    - Include error handling and validation feedback
    - Provide next steps when appropriate
    - Preserve all specialist agent responses exactly