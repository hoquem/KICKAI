name: Continuous Integration

on:
  pull_request:
    branches: [main, staging, testing]
  push:
    branches: [main, staging, testing, develop]

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip
  ENVIRONMENT: 'testing'
  CI: 'true'

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit

      - name: Check code formatting
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/

      - name: Run linter
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=100

      - name: Run type checker
        run: |
          mypy src/ --ignore-missing-imports --strict

      - name: Run security check
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt

      - name: Run unit tests
        run: |
          pytest tests/test_agents/ tests/test_core/ --cov=src --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit
          name: codecov-unit

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt

      - name: Run integration tests
        run: |
          pytest tests/test_integration/ tests/test_services/ --cov=src --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-integration

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Check for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          pip-audit --format json --output pip-audit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Build validation
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate application structure
        run: |
          # Check that all required modules can be imported
          python -c "
          import sys
          sys.path.append('src')
          
          try:
              from core.config import get_config
              from agents.handlers import SimpleAgenticHandler
              from services.team_service import TeamService
              from telegram.player_registration_handler import PlayerRegistrationHandler
              print('✅ All core modules import successfully')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              exit(1)
          "

      - name: Validate configuration files
        run: |
          # Check Railway configuration
          if [ -f "railway.json" ]; then
            cat railway.json | jq . > /dev/null && echo "✅ railway.json is valid"
          fi
          
          # Check environment files
          if [ -f "env.example" ]; then
            echo "✅ env.example exists"
          fi

      - name: Check file structure
        run: |
          # Validate project structure
          echo "📁 Checking project structure..."
          
          required_dirs=("src/agents" "src/core" "src/services" "src/telegram" "tests")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ $dir exists"
            else
              echo "❌ $dir missing"
              exit 1
            fi
          done

  # Performance checks
  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt

      - name: Run performance tests
        run: |
          # Simple performance validation
          echo "⚡ Running performance checks..."
          
          # Check import time
          time python -c "
          import sys
          sys.path.append('src')
          from core.config import get_config
          from agents.handlers import SimpleAgenticHandler
          "
          
          # Check memory usage (basic)
          python -c "
          import sys
          import psutil
          import os
          
          process = psutil.Process(os.getpid())
          print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
          " || echo "⚠️ Memory check not available"

  # Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          echo "📚 Checking documentation..."
          
          # Check for required documentation files
          required_docs=("README.md" "PROJECT_STATUS.md" "TELEGRAM_BOT_SETUP.md")
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ $doc exists"
              # Check if file has content
              if [ -s "$doc" ]; then
                echo "✅ $doc has content"
              else
                echo "⚠️ $doc is empty"
              fi
            else
              echo "❌ $doc missing"
            fi
          done
          
          # Check for docstrings in Python files
          echo "🔍 Checking Python docstrings..."
          find src/ -name "*.py" -exec grep -l "def " {} \; | head -5 | xargs -I {} python -c "
          import ast
          import sys
          sys.path.append('src')
          
          try:
              with open('{}', 'r') as f:
                  tree = ast.parse(f.read())
              
              functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
              documented = [f for f in functions if ast.get_docstring(f)]
              
              print(f'Functions in {}: {len(functions)}, Documented: {len(documented)}')
          except Exception as e:
              print(f'Error checking {}: {e}')
          " || echo "⚠️ Docstring check not available"

  # Final CI summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security, build, performance, docs]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "📊 CI Pipeline Summary" > ci-summary.txt
          echo "=====================" >> ci-summary.txt
          echo "Branch: ${{ github.ref_name }}" >> ci-summary.txt
          echo "Commit: ${{ github.sha }}" >> ci-summary.txt
          echo "Trigger: ${{ github.event_name }}" >> ci-summary.txt
          echo "" >> ci-summary.txt
          
          echo "Job Results:" >> ci-summary.txt
          echo "- Lint: ${{ needs.lint.result }}" >> ci-summary.txt
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> ci-summary.txt
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> ci-summary.txt
          echo "- Security: ${{ needs.security.result }}" >> ci-summary.txt
          echo "- Build: ${{ needs.build.result }}" >> ci-summary.txt
          echo "- Performance: ${{ needs.performance.result }}" >> ci-summary.txt
          echo "- Documentation: ${{ needs.docs.result }}" >> ci-summary.txt
          
          # Overall status
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "" >> ci-summary.txt
            echo "✅ CI Pipeline PASSED" >> ci-summary.txt
          else
            echo "" >> ci-summary.txt
            echo "❌ CI Pipeline FAILED" >> ci-summary.txt
          fi

      - name: Upload CI summary
        uses: actions/upload-artifact@v3
        with:
          name: ci-summary
          path: ci-summary.txt 