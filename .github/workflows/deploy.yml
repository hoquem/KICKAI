name: Deploy to Railway

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt

      - name: Run linting
        run: |
          python -m flake8 src/
          python -m black --check src/
          python -m isort --check-only src/

      - name: Run type checking
        run: |
          python -m mypy src/

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ --cov=src --cov-report=xml
        env:
          PYTHONPATH: src
          USE_MOCK_DATASTORE: true
          USE_MOCK_TELEGRAM: true
          USE_MOCK_AI: true

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ --cov=src --cov-report=xml
        env:
          PYTHONPATH: src
          USE_MOCK_DATASTORE: true
          USE_MOCK_TELEGRAM: true
          USE_MOCK_AI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  deploy-testing:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Testing
        uses: railway/deploy@v1
        with:
          service: kickai-testing
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: |
          sleep 30

      - name: Run health checks
        run: |
          # Add health check logic here
          echo "Health checks completed for testing environment"

  deploy-production:
    needs: [test, deploy-testing]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Production
        uses: railway/deploy@v1
        with:
          service: kickai-production
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: |
          sleep 30

      - name: Run smoke tests
        run: |
          # Add smoke test logic here
          echo "Smoke tests completed for production environment"

  notify:
    needs: [deploy-testing, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-testing.result }}" == "success" ] && [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ All deployments successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi 