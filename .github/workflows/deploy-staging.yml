name: Staging Deployment Pipeline

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_CACHE_DIR: false

jobs:
  # Quick dependency check for staging
  dependencies:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=staging-deps-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-local.txt

      - name: Quick dependency validation
        run: |
          pip check
          python -c "import telegram, firebase_admin, langchain; print('‚úÖ Core dependencies OK')"

  # Staging-specific tests
  test:
    name: Staging Tests
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ needs.dependencies.outputs.cache-key }}
          restore-keys: |
            staging-deps-${{ env.PYTHON_VERSION }}-

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-local.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run staging tests
        run: |
          # Run critical tests for staging
          pytest tests/test_telegram/ tests/test_services/ -v --tb=short
          
          # Run integration tests
          pytest tests/test_integration/ -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-staging
          path: |
            .pytest_cache/
            htmlcov/

  # Quick quality check
  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run quick quality checks
        run: |
          black --check src/ || echo "‚ö†Ô∏è Code formatting issues found"
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Linting issues found"

  # Staging deployment
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [dependencies, test, quality]
    if: |
      github.ref == 'refs/heads/staging' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'true')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli@latest

      - name: Deploy to Railway Staging
        uses: railway/deploy@v1
        with:
          service: kickai-staging
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for staging deployment..."
          sleep 30

      - name: Health check staging
        run: |
          echo "üè• Checking staging health..."
          
          # Get service URL
          SERVICE_URL=$(railway service status --json | jq -r '.url')
          
          if [ "$SERVICE_URL" != "null" ] && [ "$SERVICE_URL" != "" ]; then
            # Health check with retries
            for i in {1..3}; do
              if curl -f -s "$SERVICE_URL/health" > /dev/null; then
                echo "‚úÖ Staging health check passed"
                break
              else
                echo "‚ö†Ô∏è Health check attempt $i failed"
                sleep 10
              fi
            done
          fi

      - name: Notify staging deployment
        run: |
          echo "‚úÖ Staging deployment completed!"
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # Staging smoke tests
  smoke-test:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli@latest

      - name: Run smoke tests
        run: |
          echo "üß™ Running staging smoke tests..."
          
          # Get service URL
          SERVICE_URL=$(railway service status --json | jq -r '.url')
          
          if [ "$SERVICE_URL" != "null" ] && [ "$SERVICE_URL" != "" ]; then
            # Basic functionality tests
            echo "Testing basic endpoints..."
            
            # Health endpoint
            curl -f "$SERVICE_URL/health" || echo "‚ùå Health endpoint failed"
            
            # Status endpoint (if exists)
            curl -f "$SERVICE_URL/status" || echo "‚ö†Ô∏è Status endpoint not available"
            
            echo "‚úÖ Smoke tests completed"
          else
            echo "‚ö†Ô∏è Could not get service URL for smoke tests"
          fi 