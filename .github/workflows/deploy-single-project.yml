name: Deploy to Railway Services

on:
  push:
    branches: [main, staging, testing]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-local.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy

      - name: Run flake8
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run mypy
        run: mypy src/ --ignore-missing-imports

  deploy-testing:
    name: Deploy to Testing Service
    needs: [test, lint]
    if: github.ref == 'refs/heads/testing'
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Testing Service
        uses: railway/deploy@v1
        with:
          service: kickai-testing
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.TESTING_HEALTH_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Testing deployment successful!"
          echo "Service: kickai-testing"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  deploy-staging:
    name: Deploy to Staging Service
    needs: [test, lint]
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Staging Service
        uses: railway/deploy@v1
        with:
          service: kickai-staging
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.STAGING_HEALTH_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Staging deployment successful!"
          echo "Service: kickai-staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  deploy-production:
    name: Deploy to Production Service
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway Production Service
        uses: railway/deploy@v1
        with:
          service: kickai-production
          token: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.PRODUCTION_HEALTH_URL }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Service: kickai-production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  rollback:
    name: Rollback on Failure
    needs: [deploy-testing, deploy-staging, deploy-production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine failed service
        id: failed-service
        run: |
          if [ "${{ needs.deploy-testing.result }}" == "failure" ]; then
            echo "service=kickai-testing" >> $GITHUB_OUTPUT
            echo "environment=testing" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
            echo "service=kickai-staging" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-production.result }}" == "failure" ]; then
            echo "service=kickai-production" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Rollback deployment
        if: steps.failed-service.outputs.service != ''
        run: |
          echo "🔄 Rolling back ${{ steps.failed-service.outputs.service }} service..."
          # Add rollback logic here using Railway CLI
          echo "Rollback completed for ${{ steps.failed-service.outputs.service }}"

      - name: Notify rollback
        if: steps.failed-service.outputs.service != ''
        run: |
          echo "❌ Deployment failed for ${{ steps.failed-service.outputs.service }} service"
          echo "🔄 Rollback initiated for ${{ steps.failed-service.outputs.environment }} environment" 