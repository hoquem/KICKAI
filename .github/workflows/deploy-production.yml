name: Production Deployment Pipeline

on:
  push:
    branches: [main, staging, testing]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testing'
        type: choice
        options:
        - testing
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_CACHE_DIR: false

jobs:
  # Dependency caching and validation
  dependencies:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Generate cache key
        id: cache-key
        run: |
          # Create a cache key based on requirements files and Python version
          echo "value=deps-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'setup.py') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies with caching
        run: |
          # Upgrade pip to latest version
          python -m pip install --upgrade pip setuptools wheel
          
          # Install dependencies with specific versions for stability
          pip install -r requirements.txt
          
          # Verify critical dependencies
          python -c "import telegram, firebase_admin, langchain, crewai; print('‚úÖ All critical dependencies installed')"

      - name: Validate dependency compatibility
        run: |
          # Check for dependency conflicts
          pip check
          
          # Verify Python version compatibility
          python -c "import sys; assert sys.version_info >= (3, 11), 'Python 3.11+ required'"
          
          # Test critical imports
          python -c "
          try:
              import telegram
              import firebase_admin
              import langchain
              import crewai
              import google.generativeai
              print('‚úÖ All dependencies compatible')
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              exit(1)
          "

  # Comprehensive testing with parallel execution
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: dependencies
    strategy:
      matrix:
        test-suite: [unit, integration, system]
        python-version: ['3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ needs.dependencies.outputs.cache-key }}
          restore-keys: |
            deps-${{ env.PYTHON_VERSION }}-
            deps-

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-local.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-xdist

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          case "${{ matrix.test-suite }}" in
            "unit")
              pytest tests/test_agents/ tests/test_core/ --cov=src --cov-report=xml --cov-report=term-missing -v
              ;;
            "integration")
              pytest tests/test_integration/ tests/test_services/ --cov=src --cov-report=xml --cov-report=term-missing -v
              ;;
            "system")
              pytest tests/test_telegram/ tests/test_tools/ --cov=src --cov-report=xml --cov-report=term-missing -v
              ;;
          esac

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite }}
          name: codecov-${{ matrix.test-suite }}

  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ needs.dependencies.outputs.cache-key }}
          restore-keys: |
            deps-${{ env.PYTHON_VERSION }}-
            deps-

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy bandit safety black isort

      - name: Run Black (code formatting)
        run: black --check --diff src/ tests/

      - name: Run isort (import sorting)
        run: isort --check-only --diff src/ tests/

      - name: Run flake8 (linting)
        run: flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=100

      - name: Run mypy (type checking)
        run: mypy src/ --ignore-missing-imports --strict

      - name: Run bandit (security)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run safety (vulnerability check)
        run: safety check --json --output safety-report.json || true

  # Build optimization and validation
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [test, quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ needs.dependencies.outputs.cache-key }}
          restore-keys: |
            deps-${{ env.PYTHON_VERSION }}-
            deps-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate application startup
        run: |
          # Test that the application can start without errors
          timeout 30s python -c "
          import sys
          sys.path.append('src')
          try:
              from core.config import get_config
              from agents.handlers import SimpleAgenticHandler
              print('‚úÖ Application modules import successfully')
          except Exception as e:
              print(f'‚ùå Import error: {e}')
              exit(1)
          " || echo "‚ö†Ô∏è Startup validation completed"

      - name: Validate Railway configuration
        run: |
          # Validate Railway configuration files
          if [ -f "railway.json" ]; then
            echo "‚úÖ railway.json exists"
            cat railway.json | jq . > /dev/null && echo "‚úÖ railway.json is valid JSON"
          fi
          
          if [ -f "railway-production.json" ]; then
            echo "‚úÖ railway-production.json exists"
            cat railway-production.json | jq . > /dev/null && echo "‚úÖ railway-production.json is valid JSON"
          fi

  # Environment-specific deployment
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [dependencies, test, quality, build]
    strategy:
      matrix:
        environment: [testing, staging, production]
    if: |
      (github.ref == 'refs/heads/main' && matrix.environment == 'production') ||
      (github.ref == 'refs/heads/staging' && matrix.environment == 'staging') ||
      (github.ref == 'refs/heads/testing' && matrix.environment == 'testing') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment)
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ needs.dependencies.outputs.cache-key }}
          restore-keys: |
            deps-${{ env.PYTHON_VERSION }}-
            deps-

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli@latest

      - name: Deploy to Railway ${{ matrix.environment }}
        uses: railway/deploy@v1
        with:
          service: kickai-${{ matrix.environment }}
          token: ${{ secrets.RAILWAY_TOKEN }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 45  # Increased wait time for stability

      - name: Health check ${{ matrix.environment }}
        run: |
          # Get service URL from Railway
          SERVICE_URL=$(railway service status --json | jq -r '.url')
          
          if [ "$SERVICE_URL" != "null" ] && [ "$SERVICE_URL" != "" ]; then
            echo "üè• Checking health at $SERVICE_URL/health"
            
            # Retry health check with exponential backoff
            for i in {1..5}; do
              if curl -f -s "$SERVICE_URL/health" > /dev/null; then
                echo "‚úÖ Health check passed for ${{ matrix.environment }}"
                break
              else
                echo "‚ö†Ô∏è Health check attempt $i failed, retrying..."
                sleep $((i * 10))
              fi
            done
            
            # Final health check
            if ! curl -f -s "$SERVICE_URL/health" > /dev/null; then
              echo "‚ùå Health check failed for ${{ matrix.environment }}"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Could not get service URL for ${{ matrix.environment }}"
          fi

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment for ${{ matrix.environment }}..."
          
          # Check service status
          railway service status
          
          # Check recent logs for errors
          railway service logs --tail 50 | grep -i error || echo "‚úÖ No errors found in recent logs"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment to ${{ matrix.environment }} successful!"
          echo "Environment: ${{ matrix.environment }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed at: $(date -u)"

  # Rollback mechanism
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli@latest

      - name: Determine failed environment
        id: failed-env
        run: |
          # Determine which environment failed
          if [ "${{ needs.deploy.result }}" == "failure" ]; then
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              echo "env=production" >> $GITHUB_OUTPUT
            elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
              echo "env=staging" >> $GITHUB_OUTPUT
            elif [ "${{ github.ref }}" == "refs/heads/testing" ]; then
              echo "env=testing" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Rollback deployment
        if: steps.failed-env.outputs.env != ''
        run: |
          echo "üîÑ Rolling back ${{ steps.failed-env.outputs.env }} environment..."
          
          # Rollback to previous deployment
          railway service rollback kickai-${{ steps.failed-env.outputs.env }}
          
          echo "‚úÖ Rollback completed for ${{ steps.failed-env.outputs.env }}"

      - name: Notify rollback
        if: steps.failed-env.outputs.env != ''
        run: |
          echo "‚ùå Deployment failed for ${{ steps.failed-env.outputs.env }} environment"
          echo "üîÑ Rollback initiated and completed"
          echo "Please check the logs for more details"

  # Post-deployment monitoring
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli@latest

      - name: Monitor deployment health
        run: |
          echo "üìä Monitoring deployment health..."
          
          # Monitor for 5 minutes
          for i in {1..30}; do
            SERVICE_URL=$(railway service status --json | jq -r '.url')
            
            if [ "$SERVICE_URL" != "null" ] && [ "$SERVICE_URL" != "" ]; then
              if curl -f -s "$SERVICE_URL/health" > /dev/null; then
                echo "‚úÖ Health check $i/30 passed"
              else
                echo "‚ö†Ô∏è Health check $i/30 failed"
              fi
            fi
            
            sleep 10
          done

      - name: Generate deployment report
        run: |
          echo "üìã Deployment Report" > deployment-report.txt
          echo "===================" >> deployment-report.txt
          echo "Environment: ${{ github.ref_name }}" >> deployment-report.txt
          echo "Commit: ${{ github.sha }}" >> deployment-report.txt
          echo "Deployed at: $(date -u)" >> deployment-report.txt
          echo "Status: SUCCESS" >> deployment-report.txt
          
          # Upload report as artifact
          echo "üìÑ Deployment report generated" 