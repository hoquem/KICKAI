[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kickai"
version = "0.1.0"
description = "AI-powered Telegram bot for Sunday league football team management"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "telethon>=1.28.5",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "firebase-admin>=6.2.0",
    "google-cloud-firestore>=2.11.0",
    "crewai==0.150.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/kickai"
Repository = "https://github.com/yourusername/kickai"
Issues = "https://github.com/yourusername/kickai/issues"

[tool.setuptools.packages.find]
include = ["kickai*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(\
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["venv", ".venv", "build", "dist", ".git", ".pytest_cache"]
known_first_party = ["kickai"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
packages = ["kickai"]

[[tool.mypy.overrides]]
module = [
    "telethon.*",
    "firebase_admin.*",
    "crewai.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=strict",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "strict"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Custom linting rules for architectural enforcement
[tool.archlint]
# Define architectural layers
layers = [
    "infrastructure",  # src/core, src/utils, src/database
    "domain",         # src/database/models_improved
    "application",    # src/services, src/agents, src/tasks
    "presentation",   # src/telegram, src/tools
]

# Define layer dependencies
[tool.archlint.layer_dependencies]
infrastructure = []
domain = ["infrastructure"]
application = ["domain", "infrastructure"]
presentation = ["application", "domain"]

# Forbidden cross-layer imports
forbidden_imports = [
    "infrastructure -> presentation",
    "infrastructure -> application",
    "domain -> presentation",
    "domain -> application",
    "application -> presentation",
]

# Allowed in-function imports (for circular dependency resolution)
allowed_in_function_imports = [
    "src.services.team_mapping_service",
    "src.services.access_control_service",
]

# Import organization rules
import_sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]

# Maximum import complexity
max_import_complexity = 10

# Circular import detection
detect_circular_imports = true
max_circular_import_depth = 3

# Ruff configuration
[tool.ruff]
# Same as flake8's max-line-length
line-length = 100

# Target Python 3.11+
target-version = "py311"

# Exclude directories (equivalent to flake8's exclude)
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info",
    "migrations",
    "node_modules",
]

# Linting configuration
[tool.ruff.lint]
# Enable flake8-style rules and additional checks
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "T20", # flake8-print
]

# Ignore specific rules (equivalent to flake8's extend-ignore)
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by line-length)
]

# Per-file ignores (equivalent to flake8's per-file-ignores)
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**" = ["F401"]     # Allow unused imports in test files
"src/features/*/__init__.py" = ["F401"]  # Allow unused imports in feature modules

# Import sorting configuration (replaces isort)
[tool.ruff.lint.isort]
known-first-party = ["src", "features", "core", "utils", "agents", "database"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Format configuration (replaces black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto" 