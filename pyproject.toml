[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kickai"
version = "1.0.0"
description = "KICKAI - Multi-team Telegram bot for football management"
authors = [{name = "KICKAI Team"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "python-telegram-bot>=20.0",
    "firebase-admin>=6.0.0",
    "google-cloud-firestore>=2.0.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "asyncio-mqtt>=0.16.0",
    "stripe>=7.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "telegram",
    "firebase_admin",
    "google",
    "httpx",
    "pydantic",
    "dotenv",
    "asyncio_mqtt",
    "stripe",
    "pytest",
    "pytest_asyncio",
    "pytest_mock",
    "black",
    "isort",
    "flake8",
    "mypy",
    "bandit",
    "pre_commit",
]
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
force_sort_within_sections = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
lines_after_imports = 2
skip_glob = [
    "venv/**",
    ".venv/**",
    "build/**",
    "dist/**",
    "*.egg-info/**",
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # assert statements in tests
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "telegram.*",
    "firebase_admin.*",
    "google.*",
    "httpx.*",
    "pydantic.*",
    "stripe.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and mktemp_q

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Custom linting rules for architectural enforcement
[tool.archlint]
# Define architectural layers
layers = [
    "infrastructure",  # src/core, src/utils, src/database
    "domain",         # src/database/models_improved
    "application",    # src/services, src/agents, src/tasks
    "presentation",   # src/telegram, src/tools
]

# Define layer dependencies
layer_dependencies = {
    "infrastructure": [],
    "domain": ["infrastructure"],
    "application": ["domain", "infrastructure"],
    "presentation": ["application", "domain"],
}

# Forbidden cross-layer imports
forbidden_imports = [
    "infrastructure -> presentation",
    "infrastructure -> application",
    "domain -> presentation",
    "domain -> application",
    "application -> presentation",
]

# Allowed in-function imports (for circular dependency resolution)
allowed_in_function_imports = [
    "src.services.team_mapping_service",
    "src.services.access_control_service",
]

# Import organization rules
import_sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]

# Maximum import complexity
max_import_complexity = 10

# Circular import detection
detect_circular_imports = true
max_circular_import_depth = 3 